package juego;

import java.awt.Color;

import java.awt.Image;
import java.util.ArrayList;

import entorno.Entorno;
import entorno.Herramientas;
import entorno.InterfaceJuego;
import juego.Personaje.Gondolf;

public class Juego extends InterfaceJuego {
	// El objeto Entorno que controla el tiempo y otros
	private Entorno entorno;
	private Gondolf gondolf;
	private Roca roca;
	private Murcielago murcielago;
	private Image fondo;
	private int vida = 100;
	private int mana = 100;
	
	
	private ArrayList<BotonesMouse> botones = new ArrayList<>();
	
	private ArrayList<Roca> rocas= new ArrayList<>();
	// Variables y métodos propios de cada grupo
	// ...
	
	private String hechizoSeleccionado = null;
	
	Juego() {
		// Inicializa el objeto entorno


		entorno = new Entorno(this, "Gandalf el crocodrilo", 800, 600);

		fondo= Herramientas.cargarImagen("Fondo.jpg");

		
		//botones del menu 
		botones.add(new BotonesMouse(700, 400, 150, 40, "Hechizo 1"));
		botones.add(new BotonesMouse(700, 450, 150, 40, "Hechizo 2"));

		rocas.add(new Roca(500, 300, entorno));
		rocas.add(new Roca(300, 200, entorno));

		gondolf = new Gondolf(400, 300, roca);

		murcielago= new Murcielago(100,200, 1, 2);

		
		// aca pueden entrar personajes, enemigos, obstaculos, puntos

		// Inicializar lo que haga falta para el juego
		// ...

		// Inicia el juego!
		this.entorno.iniciar();

	}

	/**
	 * Durante el juego, el método tick() será ejecutado en cada instante y por lo
	 * tanto es el método más importante de esta clase. Aquí se debe actualizar el
	 * estado interno del juego para simular el paso del tiempo (ver el enunciado
	 * del TP para mayor detalle).
	 */
	public void tick() {

		entorno.dibujarImagen(fondo, 300, 300, 0, 1.5);// fondo del juego
		entorno.dibujarRectangulo(700, 300, 200, 600, 0, Color.DARK_GRAY); // menu en la parte derecha de la pantalla 

		entorno.ancho();

		gondolf.mover(0, 0, entorno, roca, rocas);



		// texto de vida y mana del personaje 
		entorno.cambiarFont("Arial", 18, Color.WHITE);
		entorno.escribirTexto("Vida", 620, 50);
		entorno.escribirTexto("Maná", 620, 100);


		//barras de vida y mana 

		entorno.dibujarRectangulo(700, 65, 140, 20, 0, Color.GRAY); 
		entorno.dibujarRectangulo(700, 115, 140, 20, 0, Color.GRAY); 

		entorno.dibujarRectangulo(700 - (70 - vida * 0.7), 65, vida * 1.4, 20, 0, Color.RED);
		entorno.dibujarRectangulo(700 - (70 - mana * 0.7), 115, mana * 1.4, 20, 0, Color.CYAN);



		// entorno.dibujarRectangulo(x, y, Dy, Dx, Dy, null)

		//if (!gondolf.colision(entorno)) {



		//}
		

		gondolf.dibujarPj(entorno);

		murcielago.dibujar(entorno);
		murcielago.mover(gondolf);

		murcielago.colision(murcielago.getX(), murcielago.getY(), entorno);

		murcielago.MurcielagoMov(gondolf);

		
		

		for(Roca roca : rocas) {

			roca.dibujar(entorno);
		}


		//roca.colisionConPj(gondolf);
		// Procesamiento de un instante de tiempo
		// ...

		
		// Dibujar botones
		for (BotonesMouse boton : botones) {
			boton.dibujar(entorno);
		}

		// Interacción con el mouse
		if (entorno.sePresionoBoton(entorno.BOTON_IZQUIERDO)) {
			int mx = entorno.mouseX();
			int my = entorno.mouseY();

			boolean hizoClickEnBoton = false;

			for (BotonesMouse boton : botones) {
				if (boton.estaDentro(mx, my)) {
					hizoClickEnBoton = true;
					hechizoSeleccionado = boton.getTexto();
					System.out.println("Hechizo seleccionado: " + hechizoSeleccionado);
					break;
				}
			}

			// Si no clickeó ningún botón y había hechizo seleccionado, lanzar hechizo
			if (!hizoClickEnBoton && hechizoSeleccionado != null) {
				System.out.println("Lanzando " + hechizoSeleccionado + " en (" + mx + "," + my + ")");

				int radio = 100; // radio de efecto del hechizo
				double dx = murcielago.getX() - mx;
				double dy = murcielago.getY() - my;
				double distancia = Math.sqrt(dx * dx + dy * dy);

				if (distancia <= radio) {
					System.out.println("¡Murciélago alcanzado!");
					murcielago.restarVida(40); // puntos de vida restados al murcielago
				} else {
					System.out.println("Murciélago fuera del alcance.");
				}

				// Gasta maná
				mana = Math.max(mana - 5, 0);

				// Resetear hechizo
				hechizoSeleccionado = null;
			}
		}
	}






	@SuppressWarnings("unused")
	public static void main(String[] args) {
		Juego juego = new Juego();
	}
}
